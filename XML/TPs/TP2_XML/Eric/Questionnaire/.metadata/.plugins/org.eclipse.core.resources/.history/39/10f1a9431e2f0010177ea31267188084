import java.io.*;
import java.util.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * @author rakotobe
 *
 */


public class AppliTest {
	
	
	private LectureClavier lecture = new LectureClavier() ; 
	private String titre ;
	private String accroche ;
	// un caractere possede un identifiant correspondant a un symbole et un libelle 
	private Map <Integer,String> interpretationCaracteres = new HashMap<Integer,String>() ; 
	// une question contient un libelle , et des reponses = identifiant + libelle reponse
	private HashMap<String,Reponses> questionsReponses = new HashMap<String, Reponses>() ; 

	
	/**MÃ©thode qui permet de fixer le titre de notre questionnaire*/
	public void setTitle(){
		System.out.println("****************** TITRE (en String)****************** = ");
		String t = lecture.lectureString() ; 
		this.titre = t ; 
	}
	
	
	
	/**MÃ©thode qui permet de fixer l'accroche de notre questionnaire */
	public void setAccroche(){
		System.out.println("****************** ACCROCHE (en String)****************** = ");
		String accroche = lecture.lectureString() ; 
		this.accroche = accroche ; 
	}
	
	
	
	/**MÃ©thode qui permet de fixer le nombre de caracteres : par exemple vous avez un caractere consciencieux, ou vous avez un sens de la priorite ... */
	public void setNbCaracteresEtudies(){
		System.out.println("****************** LES CARACTERES (consciencieux, independant...) ******************");
		System.out.println("Combien de caracteres ?");
		int nbCaracteres = lecture.lectureInt(); 
		System.out.println("Identifiants et commentaires associes a chacun des caracteres");
		for (int i = 1 ; i<= nbCaracteres ; i ++ ) {
			System.out.println("Identifiant du caractere n° " + i + " (en int) = ");
		    int idCaracteres = lecture.lectureInt() ; 
		    System.out.println("Commentaires du caractere " + i + " (en String) = " );
		    String comsCaracteres  = lecture.lectureString() ; 
		    this.interpretationCaracteres.put(idCaracteres , comsCaracteres ) ; 
		}
	}
	
	
	
	/**MÃ©thode qui permet de creer le QCM relatif aux questionnaires */
	public void setQuestionsReponses(){
		System.out.println("****************** LES QUESTIONS ****************** = ");
		//les questions , libelle et identifiants du caractere
		System.out.println("Combien de questions ? = ");
		int nbQuestions = lecture.lectureInt(); 
		System.out.println("****************** LES REPONSES  ****************** = ");
		for (int i = 1 ; i<= nbQuestions ; i ++ ) {
			System.out.println(" => Libelle de la question n°" + i + " (en String) = "  );
			String libQuestion = lecture.lectureString() ;
			Reponses r = new Reponses() ;
			for (Integer j : this.interpretationCaracteres.keySet()){
				System.out.println(" Libelle correspondant au symbole d'identificateur " + j + " (en String) = "  );
				String libCaractereAssocie = lecture.lectureString() ;
				r = new Reponses() ; 
				r.getMesReponses().put(j, libCaractereAssocie);
			}
			this.questionsReponses.put(libQuestion, r);
		}
	}
	
	
	//getteurs
	public LectureClavier getLecture() {return lecture;}
	public String getTitre() {return titre;}
	public String getAccroche() {return accroche;}
	public Map<Integer, String> getInterpretationCaracteres() {return interpretationCaracteres;}


	public int hashCode(){
		return String.class.hashCode() ; 
	}

	
	
	
	public static void main(String[] args) throws Exception {
		   
		AppliTest monGenerateurDeQuestions = new AppliTest(); 
		monGenerateurDeQuestions.setTitle();
		monGenerateurDeQuestions.setAccroche();
		monGenerateurDeQuestions.setNbCaracteresEtudies();
		monGenerateurDeQuestions.setQuestionsReponses();

		
		System.out.println("***********************************************************************************"  );
		System.out.println("**************LE QUESTIONNAIRE EST MAINTENANT PRET EN VERSION XML !! **************");
		System.out.println("***********************************************************************************"  );
			
		
		//*************************************CREATION DU QUESTIONNAIRE EN VERSION XML *******************************************//

		  DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); 
		  dbf.setIgnoringElementContentWhitespace(true); 
		  DocumentBuilder db = dbf.newDocumentBuilder();
		  Document document = db.parse(new File("../monTestPsychoXML.xml"));
		  
		  
		  Element racine = document.getDocumentElement();
		  // titre testDePersonnalite
		  Element testDePersonnaliteXML = document.createElement("testDePersonnalite");
		  Element titreXML = document.createElement("titre");
		  titreXML.appendChild(document.createTextNode(monGenerateurDeQuestions.getTitre()));
		  testDePersonnaliteXML.appendChild(titreXML);
		  
		  // accroche testDePersonnalite
		  Element accrocheXML = document.createElement("accroche");
		  accrocheXML.appendChild(document.createTextNode(monGenerateurDeQuestions.getAccroche()));
		  testDePersonnaliteXML.appendChild(accrocheXML);
		  
		  
//			private Map <Integer,String> interpretationCaracteres = new HashMap<Integer,String>() ; 
//			private HashMap<String,Reponses> questionsReponses = new HashMap<String, Reponses>() ; 
		  
		  //questionnaire
		  Element questionnaire = document.createElement("questionnaire");
		  int i = 0 ;
		  //on parcours notre map mesQuestionEtReponses et on construit les questions 
		  for (String s : monGenerateurDeQuestions.questionsReponses.keySet()) {
			  Element questions = document.createElement("questions");
			  i++;
			  questions.setAttribute("id", String.valueOf(i) ) ; 
			  
			  //pour l'intitule de la question 
			  Element intituleQuestion = document.createElement("intituleQuestion");
			  intituleQuestion.appendChild(document.createTextNode(s));
			  questions.appendChild(intituleQuestion);
			  
			  
			  //maintenant pour les reponses correspondantes
			  for (Reponses r :monGenerateurDeQuestions.questionsReponses.get(s)){
				Element reponses = document.createElement("reponses");
				int j=0 ; 
				reponses.setAttribute("id", String.valueOf(i*10 + j++));
				reponses.appendChild(document.createTextNode(r.getMesReponses()));
			  	questions.appendChild(reponses);
			  }
			  
			  
			  //System.out.println(e.getKey() + " : " + e.getValue());
			  questionnaire.appendChild(questions);
		  }
		  testDePersonnaliteXML.appendChild(accrocheXML);
		  testDePersonnaliteXML.appendChild(questionnaire);
		
		
		
		  racine.appendChild(testDePersonnaliteXML);
		
		
		  XMLTools.ecrireXML(document,"../monTestPsychoXML.xml",null);
		
		
		
	}




	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
