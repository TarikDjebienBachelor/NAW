import java.awt.GridLayout;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.io.*;
import java.util.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;


/**
 * Représente un panneau destiné à contenir une question, accompagné d'un champ de saisie de réponse.
 * @author rakotobe
 */

public class QuestionPanel {
	
	private JPanel panel;
	private JLabel enonce;
	private List<String> theValues;
	private ButtonGroup group;
	// Gestionnaires de placements. Je les met en statique afin de ne pas multiplier les instances.
	public static final GridLayout TROIS_LIGNES = new GridLayout(3,1);
	
	

	
	/** Construit le QuestionPanel correspondant à la question passée en paramètre
	 * @param question contiendra intituleQuestion et les reponses 
	 */
	public QuestionPanel(Element question) {

		// Initialisation des attributs
		this.enonce = new JLabel(question.getFirstChild().getTextContent());

	
		
		  for (int i=0;i<questionnaire.getLength();i++){
			  Element questions = (Element) questionnaire.item(i); 
			  QuestionPanel qp = new QuestionPanel(questions);
				questionspanel.add(qp.getPanel());
		  }	 
		  
		  NodeList questionnaire = question.getChildNodes().item(2).getChildNodes();
		
		
		
		
		
		
		
			this.reponsepanel = question.getReponse().getMyReponsePanel();
			this.panel.add(this.reponsepanel.getPanel());
		
		this.panel = new JPanel(QuestionPanel.TROIS_LIGNES);
		// Construction du Panel
		this.panel.add(this.enonce);
		
		// Application du style
		this.enonce.setBorder(Style.MARGES_INTERNES);
		this.enonce.setForeground(Style.COULEUR_QUESTION);
		this.enonce.setFont(Style.PETITE_POLICE);
		this.panel.setBackground(Style.FOND_QUESTION);
		this.panel.setBorder(Style.BORDURE_FINE);
	}
	



		/**Construit un GroupeReponsePanel
		 * @param layout Le gestionnaire de placement à adopter.
		 */
		public GroupeReponsesPanel(LayoutManager layout) {
			List<String> theValues;
			ButtonGroup group;
			this.theValues = new LinkedList<String>();
			this.group = new ButtonGroup();
			this.initTheValues();
			
			// J'ajoute tous les boutons radios correspondant aux labels présents dans theValues.
			for (String label : this.theValues) {
				JRadioButton radio = new JRadioButton(label);
				this.getPanel().add(radio);
				this.group.add(radio);
				
				// Style du bouton radio
				radio.setFont(Style.PETITE_POLICE);
				radio.setOpaque(false);
			}
		}
		
		
		
		/** Initialise la liste de labels proposés.*/
		public String getValue() {
			// Je vais parcourir l'ensemble des boutons radio du groupe à la recherche d'un bouton selectionné.
			Enumeration<AbstractButton> e = this.group.getElements();
			String res = null;
			while(res == null && e.hasMoreElements()) {
				AbstractButton radio = e.nextElement();
				if (radio.isSelected()) {
					res = radio.getText();
				}
			}
			return res;
		}

	
	
	/**Renvoie le JPanel associé au QuestionPanel.
	 * @return Le JPanel associé au QuestionPanel.
	 */
	public JPanel getPanel() {
		return this.panel;
	}

}
